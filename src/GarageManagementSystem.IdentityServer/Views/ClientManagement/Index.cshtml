@{
    ViewData["Title"] = "Client Management";
}

@Html.AntiForgeryToken()

<div class="card">
    <div class="card-header">
        <h3 class="card-title">Clients</h3>
        <div class="card-tools">
            <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#createClientModal">
                <i class="fas fa-plus"></i> Add New Client
            </button>
        </div>
    </div>
    <div class="card-body">
        <table id="clientsTable" class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Client ID</th>
                    <th>Client Name</th>
                    <th>Description</th>
                    <th>Grant Types</th>
                    <th>Scopes</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>

<!-- View Client Modal -->
<div class="modal fade" id="viewClientModal" tabindex="-1" role="dialog" aria-labelledby="viewClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="viewClientModalLabel">Client Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="viewClientContent">
                <!-- Content will be loaded here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Client Modal -->
<div class="modal fade modal-with-select2" id="editClientModal" tabindex="-1" role="dialog" aria-labelledby="editClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editClientModalLabel">Edit Client</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="editClientForm">
                <div class="modal-body" id="editClientContent">
                    <!-- Content will be loaded here -->
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary btn-sm">Update Client</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Create Client Modal -->
<div class="modal fade modal-with-select2" id="createClientModal" tabindex="-1" role="dialog" aria-labelledby="createClientModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createClientModalLabel">Create New Client</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <form id="createClientForm">
                <div class="modal-body">
                    <!-- Basic Information Section -->
                    <div class="security-settings-section">
                        <h6><i class="fas fa-info-circle"></i> Basic Information</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="createClientId">Client ID <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="createClientId" name="ClientId" required placeholder="my-client-app">
                                    <small class="form-text text-muted">Unique identifier for your client application</small>
                                </div>
                                <div class="form-group">
                                    <label for="createClientName">Client Name <span class="text-danger">*</span></label>
                                    <input type="text" class="form-control" id="createClientName" name="ClientName" required placeholder="My Client Application">
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="createDescription">Description</label>
                                    <textarea class="form-control" id="createDescription" name="Description" rows="3" placeholder="Describe what this client is used for..."></textarea>
                                </div>
                                <div class="form-group">
                                    <label for="createProtocolType">Protocol Type</label>
                                    <select class="form-control" id="createProtocolType" name="ProtocolType">
                                        <option value="oidc">OpenID Connect</option>
                                        <option value="oauth2">OAuth 2.0</option>
                                        <option value="wsfed">WS-Federation</option>
                                        <option value="saml2p">SAML 2.0</option>
                                    </select>
                                    <small class="form-text text-muted">Authentication protocol to use</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Security Settings Section -->
                    <div class="security-settings-section">
                        <h6><i class="fas fa-shield-alt"></i> Security Settings</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="createClientSecret">Client Secret</label>
                                    <input type="text" class="form-control" id="createClientSecret" name="ClientSecret" placeholder="Enter client secret or leave blank">
                                    <small class="form-text text-muted">Shared secret between client and server</small>
                                </div>
                                <div class="form-group">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="createEnabled" name="Enabled" checked>
                                        <label class="form-check-label" for="createEnabled">Enabled</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="createRequireClientSecret" name="RequireClientSecret" checked>
                                        <label class="form-check-label" for="createRequireClientSecret">Require Client Secret</label>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="createRequirePkce" name="RequirePkce" checked>
                                        <label class="form-check-label" for="createRequirePkce">Require PKCE</label>
                                        <small class="form-text text-muted">Proof Key for Code Exchange</small>
                                    </div>
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="createAllowOfflineAccess" name="AllowOfflineAccess">
                                        <label class="form-check-label" for="createAllowOfflineAccess">Allow Offline Access</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="createIncludeJwtId" name="IncludeJwtId">
                                        <label class="form-check-label" for="createIncludeJwtId">Include JWT ID</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Authentication Configuration -->
                    <div class="client-claims-section">
                        <h6><i class="fas fa-key"></i> Authentication Configuration</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="createGrantTypes">Grant Types</label>
                                    <select class="form-control select2" id="createGrantTypes" name="GrantTypes" multiple>
                                        <!-- Options will be loaded dynamically -->
                                    </select>
                                    <small class="form-text text-muted">OAuth 2.0/OpenID Connect flows to support</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="createScopes">Scopes</label>
                                    <select class="form-control select2" id="createScopes" name="Scopes" multiple>
                                        <!-- Options will be loaded dynamically -->
                                    </select>
                                    <small class="form-text text-muted">Scopes this client has access to</small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Client Claims Section -->
                    <div class="client-claims-section">
                        <h6><i class="fas fa-tags"></i> Client Claims</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="createAlwaysSendClientClaims" name="AlwaysSendClientClaims">
                                        <label class="form-check-label" for="createAlwaysSendClientClaims">Always Send Client Claims</label>
                                        <small class="form-text text-muted">Include client claims in every token</small>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="createClientClaimsPrefix">Client Claims Prefix</label>
                                    <input type="text" class="form-control" id="createClientClaimsPrefix" name="ClientClaimsPrefix" placeholder="client_">
                                    <small class="form-text text-muted">Prefix for client claims (e.g., "client_")</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="createAllowRememberConsent" name="AllowRememberConsent" checked>
                                        <label class="form-check-label" for="createAllowRememberConsent">Allow Remember Consent</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="createRequireConsent" name="RequireConsent">
                                        <label class="form-check-label" for="createRequireConsent">Require Consent</label>
                                    </div>
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id="createAllowAccessTokensViaBrowser" name="AllowAccessTokensViaBrowser">
                                        <label class="form-check-label" for="createAllowAccessTokensViaBrowser">Allow Access Tokens via Browser</label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Client Claims Management -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="form-group">
                                    <label>Add Client Claims</label>
                                    <div class="input-group">
                                        <input type="text" class="form-control" id="newClaimType" placeholder="Claim Type (e.g., role)">
                                        <input type="text" class="form-control" id="newClaimValue" placeholder="Claim Value (e.g., admin)">
                                        <div class="input-group-append">
                                            <button type="button" class="btn btn-outline-primary" id="addClaimBtn">
                                                <i class="fas fa-plus"></i> Add
                                            </button>
                                        </div>
                                    </div>
                                    <div id="claimsList" class="mt-2">
                                        <!-- Dynamic claims will be added here -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- URIs Configuration -->
                    <div class="client-claims-section">
                        <h6><i class="fas fa-link"></i> URIs Configuration</h6>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="createRedirectUris">Redirect URIs</label>
                                    <textarea class="form-control" id="createRedirectUris" name="RedirectUris" rows="3" placeholder="Enter URIs, one per line:&#10;https://localhost:7000/callback&#10;https://localhost:7000/signin-oidc"></textarea>
                                    <small class="form-text text-muted">Allowed redirect URIs after authentication</small>
                                </div>
                                <div class="form-group">
                                    <label for="createPostLogoutRedirectUris">Post Logout Redirect URIs</label>
                                    <textarea class="form-control" id="createPostLogoutRedirectUris" name="PostLogoutRedirectUris" rows="3" placeholder="Enter URIs, one per line:&#10;https://localhost:7000/signout&#10;https://localhost:7000/signout-callback-oidc"></textarea>
                                    <small class="form-text text-muted">URIs to redirect to after logout</small>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="createAllowedCorsOrigins">CORS Origins</label>
                                    <textarea class="form-control" id="createAllowedCorsOrigins" name="AllowedCorsOrigins" rows="3" placeholder="Enter origins, one per line:&#10;https://example.com&#10;https://app.example.com"></textarea>
                                    <small class="form-text text-muted">Allowed cross-origin requests</small>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Additional Fields -->
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="createAllowedCorsOrigins">CORS Origins</label>
                                <textarea class="form-control" id="createAllowedCorsOrigins" name="AllowedCorsOrigins" rows="3" placeholder="Enter origins, one per line:&#10;https://example.com&#10;https://app.example.com"></textarea>
                                <small class="form-text text-muted">Enter one origin per line (e.g., https://example.com)</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="createAccessTokenLifetime">Access Token Lifetime (seconds)</label>
                                <input type="number" class="form-control" id="createAccessTokenLifetime" name="AccessTokenLifetime" value="3600" min="60">
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="createIdentityTokenLifetime">Identity Token Lifetime (seconds)</label>
                                <input type="number" class="form-control" id="createIdentityTokenLifetime" name="IdentityTokenLifetime" value="300" min="60">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="createAuthorizationCodeLifetime">Authorization Code Lifetime (seconds)</label>
                                <input type="number" class="form-control" id="createAuthorizationCodeLifetime" name="AuthorizationCodeLifetime" value="300" min="60">
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="createUserSsoLifetime">User SSO Lifetime (seconds)</label>
                                <input type="number" class="form-control" id="createUserSsoLifetime" name="UserSsoLifetime" value="2592000" min="60">
                                <small class="form-text text-muted">Default: 30 days (2592000 seconds)</small>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="createConsentLifetime">Consent Lifetime (seconds)</label>
                                <input type="number" class="form-control" id="createConsentLifetime" name="ConsentLifetime" min="60">
                                <small class="form-text text-muted">Leave empty for no expiration</small>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="createFrontChannelLogoutUri">Front Channel Logout URI</label>
                                <input type="url" class="form-control" id="createFrontChannelLogoutUri" name="FrontChannelLogoutUri" placeholder="https://example.com/logout">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label for="createBackChannelLogoutUri">Back Channel Logout URI</label>
                                <input type="url" class="form-control" id="createBackChannelLogoutUri" name="BackChannelLogoutUri" placeholder="https://example.com/backchannel-logout">
                            </div>
                        </div>
                    </div>
                    
                    <!-- Advanced Settings -->
                    <div class="row">
                        <div class="col-md-12">
                            <h6><strong>Advanced Settings</strong></h6>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="createEnabled" name="Enabled" checked>
                                    <label class="form-check-label" for="createEnabled">Enabled</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="createRequireClientSecret" name="RequireClientSecret" checked>
                                    <label class="form-check-label" for="createRequireClientSecret">Require Client Secret</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="createAllowRememberConsent" name="AllowRememberConsent" checked>
                                    <label class="form-check-label" for="createAllowRememberConsent">Allow Remember Consent</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="createRequireConsent" name="RequireConsent">
                                    <label class="form-check-label" for="createRequireConsent">Require Consent</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="createRequireRequestObject" name="RequireRequestObject">
                                    <label class="form-check-label" for="createRequireRequestObject">Require Request Object</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="createFrontChannelLogoutSessionRequired" name="FrontChannelLogoutSessionRequired" checked>
                                    <label class="form-check-label" for="createFrontChannelLogoutSessionRequired">Front Channel Logout Session Required</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="createBackChannelLogoutSessionRequired" name="BackChannelLogoutSessionRequired" checked>
                                    <label class="form-check-label" for="createBackChannelLogoutSessionRequired">Back Channel Logout Session Required</label>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <!-- Empty column for alignment -->
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary btn-sm" data-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary btn-sm">Create Client</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
    // Load Grant Types and Scopes from API
    function loadGrantTypesAndScopes() {
        // Load Grant Types
        $.get('/ClientManagement/GetAvailableGrantTypes')
            .done(function(data) {
                populateSelect('#createGrantTypes', data);
                populateSelect('#editGrantTypes', data);
            })
            .fail(function() {
                console.error('Failed to load grant types');
            });

        // Load Scopes
        $.get('/ClientManagement/GetAvailableScopes')
            .done(function(data) {
                populateSelect('#createScopes', data);
                populateSelect('#editScopes', data);
            })
            .fail(function() {
                console.error('Failed to load scopes');
            });
    }

    // Populate select element with options
    function populateSelect(selector, options) {
        var $select = $(selector);
        $select.empty();
        
        $.each(options, function(index, option) {
            $select.append(new Option(option.text, option.value));
        });
    }

    $(document).ready(function () {
        // Load Grant Types and Scopes options
        loadGrantTypesAndScopes();

        // Initialize Select2 for main page (outside modals)
        $('.select2:not(.modal .select2)').select2({
            width: '100%',
            placeholder: 'Select options...',
            allowClear: true
        });

            var table = $('#clientsTable').DataTable({
                "ajax": {
                    "url": "/ClientManagement/GetClients",
                    "type": "GET",
                    "datatype": "json"
                },
                "columns": [
                    { "data": "clientId" },
                    { "data": "clientName" },
                    { "data": "description" },
                    {
                        "data": "allowedGrantTypes",
                        "render": function (data) {
                            return data.map(gt => `<span class="badge badge-info">${gt}</span>`).join(' ');
                        }
                    },
                    {
                        "data": "allowedScopes",
                        "render": function (data) {
                            return data.map(s => `<span class="badge badge-success">${s}</span>`).join(' ');
                        }
                    },
                    {
                        "data": "id",
                        "render": function (data, type, row) {
                            return `<button class="btn btn-info btn-sm view-btn" data-id="${data}"><i class="fas fa-eye"></i></button>
                                    <button class="btn btn-warning btn-sm edit-btn" data-id="${data}"><i class="fas fa-edit"></i></button>
                                    <button class="btn btn-danger btn-sm delete-btn" data-id="${data}"><i class="fas fa-trash"></i></button>`;
                        },
                        "orderable": false,
                        "searchable": false
                    }
                ]
            });

            // Modal Select2 management is handled automatically by modal-select2.js

            // Handle Create Client Form Submission
            $('#createClientForm').on('submit', function (e) {
                e.preventDefault();
                var formData = $(this).serializeArray();
                var data = {};
                
                // Process form data
                $.each(formData, function(i, field) {
                    if (field.name === 'GrantTypes' || field.name === 'Scopes') {
                        if (!data[field.name]) {
                            data[field.name] = [];
                        }
                        data[field.name].push(field.value);
                    } else if (field.name === 'RedirectUris' || field.name === 'PostLogoutRedirectUris' || field.name === 'AllowedCorsOrigins') {
                        data[field.name] = field.value.split('\n').map(uri => uri.trim()).filter(uri => uri);
                    } else if (field.name === 'AccessTokenLifetime' || field.name === 'IdentityTokenLifetime' || field.name === 'AuthorizationCodeLifetime' || field.name === 'UserSsoLifetime' || field.name === 'ConsentLifetime') {
                        data[field.name] = parseInt(field.value) || 0;
                    } else {
                        data[field.name] = field.value;
                    }
                });

                $.ajax({
                    url: '/ClientManagement/Create',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(data),
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            // Destroy Select2 trước khi đóng modal
                            $('#createClientModal .select2').each(function() {
                                try {
                                    if ($(this).hasClass('select2-hidden-accessible')) {
                                        $(this).select2('destroy');
                                    }
                                } catch (e) {
                                    // Ignore destroy errors
                                }
                            });
                            
                            $('#createClientModal').modal('hide');
                            // Show success toast
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'success',
                                title: response.message,
                                showConfirmButton: false,
                                timer: 3000
                            });
                            table.ajax.reload();
                            $('#createClientForm')[0].reset();
                        } else {
                            // Show error toast
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: response.message,
                                text: response.errors ? response.errors.join(', ') : '',
                                showConfirmButton: false,
                                timer: 5000
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        // Show error toast
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'An error occurred',
                            text: error,
                            showConfirmButton: false,
                            timer: 5000
                        });
                    }
                });
            });

            // Handle View Client
            $('#clientsTable').on('click', '.view-btn', function () {
                var id = $(this).data('id');
                $.ajax({
                    url: '/ClientManagement/Details/' + id,
                    type: 'GET',
                    success: function (response) {
                        $('#viewClientContent').html(response);
                        $('#viewClientModal').modal('show');
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Error loading client details',
                            text: error,
                            showConfirmButton: false,
                            timer: 5000
                        });
                    }
                });
            });

            // Handle Edit Client
            $('#clientsTable').on('click', '.edit-btn', function () {
                var id = $(this).data('id');
                $.ajax({
                    url: '/ClientManagement/Edit/' + id,
                    type: 'GET',
                    success: function (response) {
                        $('#editClientContent').html(response);
                        
                    // Show modal - Select2 will be initialized automatically
                    $('#editClientModal').modal('show');
                    
                    // Set selected values after modal is shown
                    $('#editClientModal').on('shown.bs.modal', function () {
                        setTimeout(function() {
                            // Reload options for edit modal first
                            loadGrantTypesAndScopes();
                            
                            // Wait for Select2 to be initialized, then set values
                            setTimeout(function() {
                                var grantTypes = $('#editGrantTypes').data('selected-values');
                                var scopes = $('#editScopes').data('selected-values');
                                
                                console.log('Setting grantTypes:', grantTypes);
                                console.log('Setting scopes:', scopes);
                                
                                if (grantTypes && grantTypes.length > 0) {
                                    $('#editGrantTypes').val(grantTypes).trigger('change');
                                }
                                if (scopes && scopes.length > 0) {
                                    $('#editScopes').val(scopes).trigger('change');
                                }
                            }, 300);
                        }, 200);
                    });
                    },
                    error: function (xhr, status, error) {
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'Error loading client for edit',
                            text: error,
                            showConfirmButton: false,
                            timer: 5000
                        });
                    }
                });
            });

            // Handle Edit Client Form Submission (bind after modal content is loaded)
            $(document).on('submit', '#editClientForm', function (e) {
                e.preventDefault();
                
                // Get form data manually to ensure Select2 values are included
                var data = {
                    ClientId: $('#editClientIdInput').val(),
                    ClientName: $('#editClientName').val(),
                    Description: $('#editDescription').val(),
                    ClientSecret: $('#editClientSecret').val(),
                    
                    // Basic Security Settings
                    Enabled: $('#editEnabled').is(':checked'),
                    RequireClientSecret: $('#editRequireClientSecret').is(':checked'),
                    RequirePkce: $('#editRequirePkce').is(':checked'),
                    AllowOfflineAccess: $('#editAllowOfflineAccess').is(':checked'),
                    AllowRememberConsent: $('#editAllowRememberConsent').is(':checked'),
                    RequireConsent: $('#editRequireConsent').is(':checked'),
                    
                    // Token Settings
                    AccessTokenLifetime: parseInt($('#editAccessTokenLifetime').val()) || 3600,
                    IdentityTokenLifetime: parseInt($('#editIdentityTokenLifetime').val()) || 300,
                    AuthorizationCodeLifetime: parseInt($('#editAuthorizationCodeLifetime').val()) || 300,
                    UserSsoLifetime: parseInt($('#editUserSsoLifetime').val()) || 2592000,
                    ConsentLifetime: parseInt($('#editConsentLifetime').val()) || null,
                    
                    // Logout Settings
                    FrontChannelLogoutUri: $('#editFrontChannelLogoutUri').val(),
                    FrontChannelLogoutSessionRequired: $('#editFrontChannelLogoutSessionRequired').is(':checked'),
                    BackChannelLogoutUri: $('#editBackChannelLogoutUri').val(),
                    BackChannelLogoutSessionRequired: $('#editBackChannelLogoutSessionRequired').is(':checked'),
                    
                    // Advanced Settings
                    RequireRequestObject: $('#editRequireRequestObject').is(':checked'),
                    
                    // Collections
                    GrantTypes: $('#editGrantTypes').val() || [],
                    Scopes: $('#editScopes').val() || [],
                    RedirectUris: $('#editRedirectUris').val().split('\n').map(uri => uri.trim()).filter(uri => uri),
                    PostLogoutRedirectUris: $('#editPostLogoutRedirectUris').val().split('\n').map(uri => uri.trim()).filter(uri => uri),
                    AllowedCorsOrigins: $('#editAllowedCorsOrigins').val().split('\n').map(uri => uri.trim()).filter(uri => uri)
                };
                
                var id = $('#editClientDbId').val();
            
            // Validate required fields
            if (!data.ClientId || !data.ClientName) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Validation Error',
                    text: 'ClientId and ClientName are required',
                    showConfirmButton: false,
                    timer: 5000
                });
                return;
            }
                
                // Convert data to FormData for proper model binding
                var formData = new FormData();
                formData.append('ClientId', data.ClientId);
                formData.append('ClientName', data.ClientName);
                formData.append('Description', data.Description);
                formData.append('ClientSecret', data.ClientSecret);
                formData.append('RequirePkce', data.RequirePkce);
                formData.append('AllowOfflineAccess', data.AllowOfflineAccess);
                formData.append('AllowRememberConsent', data.AllowRememberConsent);
                formData.append('RequireConsent', data.RequireConsent);
                formData.append('AccessTokenLifetime', data.AccessTokenLifetime);
                formData.append('IdentityTokenLifetime', data.IdentityTokenLifetime);
                
                // Add arrays
                data.GrantTypes.forEach(function(value, index) {
                    formData.append('GrantTypes[' + index + ']', value);
                });
                data.Scopes.forEach(function(value, index) {
                    formData.append('Scopes[' + index + ']', value);
                });
                data.RedirectUris.forEach(function(value, index) {
                    formData.append('RedirectUris[' + index + ']', value);
                });
                data.PostLogoutRedirectUris.forEach(function(value, index) {
                    formData.append('PostLogoutRedirectUris[' + index + ']', value);
                });
                
                $.ajax({
                    url: '/ClientManagement/Edit/' + id,
                    type: 'POST',
                    contentType: false, // Let jQuery set content type for FormData
                    processData: false, // Don't process FormData
                    data: formData,
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            // Destroy Select2 trước khi đóng modal
                            $('#editClientModal .select2').each(function() {
                                try {
                                    if ($(this).hasClass('select2-hidden-accessible')) {
                                        $(this).select2('destroy');
                                    }
                                } catch (e) {
                                    // Ignore destroy errors
                                }
                            });
                            
                            $('#editClientModal').modal('hide');
                            // Show success toast
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'success',
                                title: response.message,
                                showConfirmButton: false,
                                timer: 3000
                            });
                            table.ajax.reload();
                        } else {
                            // Show error toast
                            Swal.fire({
                                toast: true,
                                position: 'top-end',
                                icon: 'error',
                                title: response.message,
                                text: response.errors ? response.errors.join(', ') : '',
                                showConfirmButton: false,
                                timer: 5000
                            });
                        }
                    },
                    error: function (xhr, status, error) {
                        // Show error toast
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'error',
                            title: 'An error occurred',
                            text: error,
                            showConfirmButton: false,
                            timer: 5000
                        });
                    }
                });
            });

            // Handle Delete Client
            $('#clientsTable').on('click', '.delete-btn', function () {
                var id = $(this).data('id');
                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!',
                    cancelButtonText: 'Cancel'
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/ClientManagement/Delete/' + id,
                            type: 'POST',
                            headers: {
                                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                            },
                            success: function (response) {
                                if (response.success) {
                                    // Show success toast
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'success',
                                        title: response.message,
                                        showConfirmButton: false,
                                        timer: 3000
                                    });
                                    table.ajax.reload();
                                } else {
                                    // Show error toast
                                    Swal.fire({
                                        toast: true,
                                        position: 'top-end',
                                        icon: 'error',
                                        title: response.message,
                                        showConfirmButton: false,
                                        timer: 5000
                                    });
                                }
                            },
                            error: function (xhr, status, error) {
                                // Show error toast
                                Swal.fire({
                                    toast: true,
                                    position: 'top-end',
                                    icon: 'error',
                                    title: 'An error occurred',
                                    text: error,
                                    showConfirmButton: false,
                                    timer: 5000
                                });
                            }
                        });
                    }
                });
            });
        });
    </script>
}
