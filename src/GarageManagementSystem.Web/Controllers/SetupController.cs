using Microsoft.AspNetCore.Mvc;
using GarageManagementSystem.Web.Services;
using GarageManagementSystem.Web.Configuration;
using GarageManagementSystem.Shared.Models;

namespace GarageManagementSystem.Web.Controllers
{
    /// <summary>
    /// Controller cho trang Setup - Insert d·ªØ li·ªáu demo
    /// </summary>
    [Route("Setup")]
    public class SetupController : Controller
    {
        private readonly ApiService _apiService;

        public SetupController(ApiService apiService)
        {
            _apiService = apiService;
        }

        /// <summary>
        /// Trang ch√≠nh Setup
        /// </summary>
        public IActionResult Index()
        {
            return View();
        }

        /// <summary>
        /// L·∫•y danh s√°ch c√°c module c√≥ th·ªÉ setup
        /// </summary>
        [HttpGet("GetSetupModules")]
        public IActionResult GetSetupModules()
        {
            var modules = new List<object>
            {
                // === PHASE 1: CORE ENTITIES (Foundational Data) ===
                new { 
                    id = "customers", 
                    name = "1. Kh√°ch h√†ng", 
                    description = "T·∫°o d·ªØ li·ªáu kh√°ch h√†ng m·∫´u (B∆∞·ªõc ƒë·∫ßu ti√™n)", 
                    icon = "fas fa-users",
                    order = 1,
                    phase = "Core Entities",
                    phaseDescription = "D·ªØ li·ªáu c∆° b·∫£n c·∫ßn thi·∫øt"
                },
                new { 
                    id = "employees", 
                    name = "2. Nh√¢n vi√™n", 
                    description = "T·∫°o d·ªØ li·ªáu nh√¢n vi√™n m·∫´u (C·∫ßn thi·∫øt cho d·ªãch v·ª•)", 
                    icon = "fas fa-user-tie",
                    order = 2,
                    phase = "Core Entities",
                    phaseDescription = "D·ªØ li·ªáu c∆° b·∫£n c·∫ßn thi·∫øt"
                },
                new { 
                    id = "suppliers", 
                    name = "3. Nh√† cung c·∫•p", 
                    description = "T·∫°o d·ªØ li·ªáu nh√† cung c·∫•p m·∫´u (C·∫ßn cho ph·ª• t√πng)", 
                    icon = "fas fa-truck",
                    order = 3,
                    phase = "Core Entities",
                    phaseDescription = "D·ªØ li·ªáu c∆° b·∫£n c·∫ßn thi·∫øt"
                },

                // === PHASE 2: ASSETS & OFFERINGS ===
                new { 
                    id = "vehicles", 
                    name = "4. Xe", 
                    description = "T·∫°o d·ªØ li·ªáu xe m·∫´u (Personal/Insurance/Company)", 
                    icon = "fas fa-car",
                    order = 4,
                    phase = "Assets & Offerings",
                    phaseDescription = "T√†i s·∫£n v√† d·ªãch v·ª•"
                },
                new { 
                    id = "parts", 
                    name = "5. Ph·ª• t√πng", 
                    description = "T·∫°o d·ªØ li·ªáu ph·ª• t√πng m·∫´u (C·∫ßn nh√† cung c·∫•p)", 
                    icon = "fas fa-cogs",
                    order = 5,
                    phase = "Assets & Offerings",
                    phaseDescription = "T√†i s·∫£n v√† d·ªãch v·ª•"
                },
                new { 
                    id = "services", 
                    name = "6. D·ªãch v·ª•", 
                    description = "T·∫°o d·ªØ li·ªáu d·ªãch v·ª• m·∫´u (C·∫ßn nh√¢n vi√™n)", 
                    icon = "fas fa-tools",
                    order = 6,
                    phase = "Assets & Offerings",
                    phaseDescription = "T√†i s·∫£n v√† d·ªãch v·ª•"
                },

                // === PHASE 3: OPERATIONAL DATA ===
                new { 
                    id = "inspections", 
                    name = "7. Ki·ªÉm tra xe", 
                    description = "T·∫°o d·ªØ li·ªáu ki·ªÉm tra m·∫´u (C·∫ßn xe + nh√¢n vi√™n)", 
                    icon = "fas fa-search",
                    order = 7,
                    phase = "Operational Data",
                    phaseDescription = "D·ªØ li·ªáu v·∫≠n h√†nh"
                },
                new { 
                    id = "appointments", 
                    name = "8. L·ªãch h·∫πn", 
                    description = "T·∫°o d·ªØ li·ªáu l·ªãch h·∫πn m·∫´u (C·∫ßn kh√°ch h√†ng + xe + nh√¢n vi√™n)", 
                    icon = "fas fa-calendar-alt",
                    order = 8,
                    phase = "Operational Data",
                    phaseDescription = "D·ªØ li·ªáu v·∫≠n h√†nh"
                },
                new { 
                    id = "quotations", 
                    name = "9. B√°o gi√°", 
                    description = "T·∫°o d·ªØ li·ªáu b√°o gi√° m·∫´u (C·∫ßn ki·ªÉm tra xe + d·ªãch v·ª• + ph·ª• t√πng)", 
                    icon = "fas fa-file-invoice-dollar",
                    order = 9,
                    phase = "Operational Data",
                    phaseDescription = "D·ªØ li·ªáu v·∫≠n h√†nh"
                },

                // === PHASE 4: TRANSACTIONAL DATA ===
                new { 
                    id = "orders", 
                    name = "10. ƒê∆°n h√†ng", 
                    description = "T·∫°o d·ªØ li·ªáu ƒë∆°n h√†ng m·∫´u (C·∫ßn b√°o gi√° ƒë√£ duy·ªát)", 
                    icon = "fas fa-clipboard-list",
                    order = 10,
                    phase = "Transactional Data",
                    phaseDescription = "D·ªØ li·ªáu giao d·ªãch"
                },
                new { 
                    id = "payments", 
                    name = "11. Thanh to√°n", 
                    description = "T·∫°o d·ªØ li·ªáu thanh to√°n m·∫´u (C·∫ßn ƒë∆°n h√†ng)", 
                    icon = "fas fa-credit-card",
                    order = 11,
                    phase = "Transactional Data",
                    phaseDescription = "D·ªØ li·ªáu giao d·ªãch"
                },

                // === SPECIAL: ALL AT ONCE ===
                new { 
                    id = "all", 
                    name = "üöÄ T·∫•t c·∫£ (Auto)", 
                    description = "T·∫°o t·∫•t c·∫£ d·ªØ li·ªáu m·∫´u theo th·ª© t·ª± t·ª± ƒë·ªông", 
                    icon = "fas fa-database",
                    order = 99,
                    phase = "Auto Setup",
                    phaseDescription = "T·ª± ƒë·ªông t·∫°o theo th·ª© t·ª±"
                }
            };

            return Json(modules);
        }

        /// <summary>
        /// Ki·ªÉm tra tr·∫°ng th√°i d·ªØ li·ªáu hi·ªán t·∫°i
        /// </summary>
        [HttpGet("CheckDataStatus")]
        public async Task<IActionResult> CheckDataStatus()
        {
            try
            {
                var status = new
                {
                    customers = await GetEntityCount("customers"),
                    vehicles = await GetEntityCount("vehicles"),
                    employees = await GetEntityCount("employees"),
                    services = await GetEntityCount("services"),
                    parts = await GetEntityCount("parts"),
                    suppliers = await GetEntityCount("suppliers"),
                    inspections = await GetEntityCount("vehicleinspections"),
                    quotations = await GetEntityCount("servicequotations"),
                    orders = await GetEntityCount("serviceorders"),
                    payments = await GetEntityCount("paymenttransactions"),
                    appointments = await GetEntityCount("appointments")
                };

                return Json(new { success = true, data = status });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        /// <summary>
        /// X√≥a t·∫•t c·∫£ d·ªØ li·ªáu (Soft delete)
        /// </summary>
        [HttpPost("ClearAllData")]
        public async Task<IActionResult> ClearAllData()
        {
            try
            {
                // G·ªçi API ƒë·ªÉ clear data
                var result = await _apiService.PostAsync<object>(ApiEndpoints.Setup.ClearAllData, null);
                
                if (result.Success)
                {
                    return Json(new { success = true, message = "ƒê√£ x√≥a t·∫•t c·∫£ d·ªØ li·ªáu th√†nh c√¥ng" });
                }
                else
                {
                    return Json(new { success = false, message = result.Message ?? "L·ªói kh√¥ng x√°c ƒë·ªãnh" });
                }
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        #region Create Methods for Individual Modules

        /// <summary>
        /// T·∫°o kh√°ch h√†ng m·ªõi
        /// </summary>
        [HttpPost("CreateCustomers")]
        public async Task<IActionResult> CreateCustomers([FromBody] object customerData)
        {
            try
            {
                var result = await _apiService.PostAsync<object>(ApiEndpoints.Customers.Create, customerData);
                return Json(new { success = result.Success, data = result.Data, message = result.Message });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        /// <summary>
        /// T·∫°o xe m·ªõi
        /// </summary>
        [HttpPost("CreateVehicles")]
        public async Task<IActionResult> CreateVehicles([FromBody] object vehicleData)
        {
            try
            {
                var result = await _apiService.PostAsync<object>(ApiEndpoints.Vehicles.Create, vehicleData);
                return Json(new { success = result.Success, data = result.Data, message = result.Message });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        /// <summary>
        /// T·∫°o nh√¢n vi√™n m·ªõi
        /// </summary>
        [HttpPost("CreateEmployees")]
        public async Task<IActionResult> CreateEmployees([FromBody] object employeeData)
        {
            try
            {
                var result = await _apiService.PostAsync<object>(ApiEndpoints.Employees.Create, employeeData);
                return Json(new { success = result.Success, data = result.Data, message = result.Message });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        /// <summary>
        /// T·∫°o d·ªãch v·ª• m·ªõi
        /// </summary>
        [HttpPost("CreateServices")]
        public async Task<IActionResult> CreateServices([FromBody] object serviceData)
        {
            try
            {
                var result = await _apiService.PostAsync<object>(ApiEndpoints.Services.Create, serviceData);
                return Json(new { success = result.Success, data = result.Data, message = result.Message });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        /// <summary>
        /// T·∫°o ph·ª• t√πng m·ªõi
        /// </summary>
        [HttpPost("CreateParts")]
        public async Task<IActionResult> CreateParts([FromBody] object partData)
        {
            try
            {
                var result = await _apiService.PostAsync<object>(ApiEndpoints.Parts.Create, partData);
                return Json(new { success = result.Success, data = result.Data, message = result.Message });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        /// <summary>
        /// T·∫°o nh√† cung c·∫•p m·ªõi
        /// </summary>
        [HttpPost("CreateSuppliers")]
        public async Task<IActionResult> CreateSuppliers([FromBody] object supplierData)
        {
            try
            {
                var result = await _apiService.PostAsync<object>(ApiEndpoints.Suppliers.Create, supplierData);
                return Json(new { success = result.Success, data = result.Data, message = result.Message });
            }
            catch (Exception ex)
            {
                return Json(new { success = false, message = ex.Message });
            }
        }

        #endregion

        /// <summary>
        /// L·∫•y s·ªë l∆∞·ª£ng entity
        /// </summary>
        private async Task<int> GetEntityCount(string entityName)
        {
            try
            {
                // S·ª≠ d·ª•ng ApiEndpoints ƒë·ªÉ map entity name sang endpoint
                string endpoint = entityName switch
                {
                    "customers" => ApiEndpoints.Customers.GetAll,
                    "vehicles" => ApiEndpoints.Vehicles.GetAll,
                    "employees" => ApiEndpoints.Employees.GetAll,
                    "services" => ApiEndpoints.Services.GetAll,
                    "parts" => ApiEndpoints.Parts.GetAll,
                    "suppliers" => ApiEndpoints.Suppliers.GetAll,
                    "vehicleinspections" => ApiEndpoints.VehicleInspections.GetAll,
                    "servicequotations" => ApiEndpoints.ServiceQuotations.GetAll,
                    "serviceorders" => ApiEndpoints.ServiceOrders.GetAll,
                    "paymenttransactions" => ApiEndpoints.PaymentTransactions.GetAll,
                    "appointments" => ApiEndpoints.Appointments.GetAll,
                    _ => entityName
                };

                // API tr·∫£ v·ªÅ ApiResponse<List<CustomerDto>>, c·∫ßn unwrap ƒë√∫ng c√°ch
                var response = await _apiService.GetAsync<List<object>>(endpoint);
                if (response.Success && response.Data != null)
                {
                    return response.Data.Count;
                }
                return 0;
            }
            catch
            {
                return 0;
            }
        }
    }
}
