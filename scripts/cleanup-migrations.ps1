# PowerShell Script ƒë·ªÉ x√≥a migrations d∆∞ th·ª´a
# Ch·∫°y v·ªõi quy·ªÅn Administrator v√† backup tr∆∞·ªõc khi th·ª±c hi·ªán

param(
    [switch]$WhatIf = $false,
    [switch]$Backup = $true,
    [switch]$Force = $false
)

Write-Host "üóëÔ∏è MIGRATION CLEANUP SCRIPT" -ForegroundColor Yellow
Write-Host "================================" -ForegroundColor Yellow

# Ki·ªÉm tra quy·ªÅn
if (-not $Force) {
    $confirm = Read-Host "‚ö†Ô∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a migrations? (yes/no)"
    if ($confirm -ne "yes") {
        Write-Host "‚ùå H·ªßy b·ªè thao t√°c" -ForegroundColor Red
        exit
    }
}

# ƒê∆∞·ªùng d·∫´n
$migrationsPath = "src/GarageManagementSystem.Infrastructure/Migrations"
$backupPath = "migrations_backup_$(Get-Date -Format 'yyyyMMdd_HHmmss')"

# T·∫°o backup n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
if ($Backup) {
    Write-Host "üì¶ T·∫°o backup migrations..." -ForegroundColor Green
    if (Test-Path $migrationsPath) {
        Copy-Item -Path $migrationsPath -Destination $backupPath -Recurse -Force
        Write-Host "‚úÖ Backup t·∫°o t·∫°i: $backupPath" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c migrations" -ForegroundColor Red
        exit 1
    }
}

# Danh s√°ch files c·∫ßn x√≥a
$filesToDelete = @(
    "20251012073417_InitialCreate.cs",
    "20251012073417_InitialCreate.Designer.cs",
    "20251014023327_AddMileageToVehicle.cs",
    "20251014023327_AddMileageToVehicle.Designer.cs",
    "20251014052214_AddPrintTemplateTable.cs",
    "20251014052214_AddPrintTemplateTable.Designer.cs",
    "20251014061829_AddPrintTemplatesTable.cs",
    "20251014061829_AddPrintTemplatesTable.Designer.cs",
    "20251014103414_AddHasInvoiceToQuotationItem.cs",
    "20251014103414_AddHasInvoiceToQuotationItem.Designer.cs",
    "20251015012805_AddCustomerReceptionAndWorkflowTracking.cs",
    "20251015012805_AddCustomerReceptionAndWorkflowTracking.Designer.cs",
    "20251015100112_ConvertReceptionStatusToEnum.cs",
    "20251015100112_ConvertReceptionStatusToEnum.Designer.cs",
    "20251015122942_AddPricingModelsToServiceAndQuotationItem.cs",
    "20251015122942_AddPricingModelsToServiceAndQuotationItem.Designer.cs",
    "20251015123726_AddPricingModelSupport.cs",
    "20251015123726_AddPricingModelSupport.Designer.cs",
    "20251016004206_UpdateServicePricingFields.cs",
    "20251016004206_UpdateServicePricingFields.Designer.cs",
    "20251016021540_IncreasePricingBreakdownLength.cs",
    "20251016021540_IncreasePricingBreakdownLength.Designer.cs",
    "20251016031914_AddItemCategoryToQuotationItem.cs",
    "20251016031914_AddItemCategoryToQuotationItem.Designer.cs",
    "20251019153822_AddQuotationAttachmentAndInsurancePricing.cs",
    "20251019153822_AddQuotationAttachmentAndInsurancePricing.Designer.cs",
    "20251020074835_AddCorporateFieldsToQuotation.cs",
    "20251020074835_AddCorporateFieldsToQuotation.Designer.cs",
    "20251022102808_AddVATFieldsToPartAndQuotationItem.cs",
    "20251022102808_AddVATFieldsToPartAndQuotationItem.Designer.cs"
)

# Files c·∫ßn gi·ªØ l·∫°i
$filesToKeep = @(
    "GarageDbContextModelSnapshot.cs"
)

Write-Host "üîç Ki·ªÉm tra files..." -ForegroundColor Blue

$deletedCount = 0
$notFoundCount = 0

foreach ($file in $filesToDelete) {
    $filePath = Join-Path $migrationsPath $file
    
    if (Test-Path $filePath) {
        if ($WhatIf) {
            Write-Host "üîç S·∫Ω x√≥a: $file" -ForegroundColor Yellow
        } else {
            try {
                Remove-Item $filePath -Force
                Write-Host "‚úÖ ƒê√£ x√≥a: $file" -ForegroundColor Green
                $deletedCount++
            } catch {
                Write-Host "‚ùå L·ªói khi x√≥a: $file - $($_.Exception.Message)" -ForegroundColor Red
            }
        }
    } else {
        Write-Host "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y: $file" -ForegroundColor Yellow
        $notFoundCount++
    }
}

# Ki·ªÉm tra files c√≤n l·∫°i
Write-Host "`nüìã Files c√≤n l·∫°i trong th∆∞ m·ª•c migrations:" -ForegroundColor Blue
$remainingFiles = Get-ChildItem $migrationsPath -File | Select-Object -ExpandProperty Name
foreach ($file in $remainingFiles) {
    if ($filesToKeep -contains $file) {
        Write-Host "‚úÖ Gi·ªØ l·∫°i: $file" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è C√≤n l·∫°i: $file" -ForegroundColor Yellow
    }
}

# T√≥m t·∫Øt
Write-Host "`nüìä T√ìM T·∫ÆT:" -ForegroundColor Cyan
Write-Host "===========" -ForegroundColor Cyan
Write-Host "‚úÖ Files ƒë√£ x√≥a: $deletedCount" -ForegroundColor Green
Write-Host "‚ö†Ô∏è Files kh√¥ng t√¨m th·∫•y: $notFoundCount" -ForegroundColor Yellow
Write-Host "üì¶ Backup t·∫°i: $backupPath" -ForegroundColor Blue

if ($WhatIf) {
    Write-Host "`nüîç CH·∫†Y V·ªöI -WhatIf: Kh√¥ng c√≥ file n√†o b·ªã x√≥a th·ª±c s·ª±" -ForegroundColor Yellow
    Write-Host "üí° ƒê·ªÉ x√≥a th·ª±c s·ª±, ch·∫°y l·∫°i script kh√¥ng c√≥ -WhatIf" -ForegroundColor Yellow
} else {
    Write-Host "`nüéâ HO√ÄN TH√ÄNH!" -ForegroundColor Green
    Write-Host "üí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng CONSOLIDATED_DATABASE_SCHEMA.sql" -ForegroundColor Blue
    Write-Host "üîÑ ƒê·ªÉ rollback, restore t·ª´: $backupPath" -ForegroundColor Blue
}

Write-Host "`n‚ö†Ô∏è L∆ØU √ù:" -ForegroundColor Red
Write-Host "- Backup database tr∆∞·ªõc khi test" -ForegroundColor Red
Write-Host "- Test tr√™n development environment tr∆∞·ªõc" -ForegroundColor Red
Write-Host "- Sync code v·ªõi team members" -ForegroundColor Red
