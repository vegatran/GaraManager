using System;
using System.IO;
using MySql.Data.MySqlClient;

class LoadDemoData
{
    static void Main(string[] args)
    {
        string connectionString = "Server=45.251.114.134;Port=3307;Database=GaraManagement;User=usergara;Password=VanD@t123#@!;AllowPublicKeyRetrieval=true;SslMode=none;";
        
        // Load FULL SETUP script (includes CREATE TABLES + DEMO DATA)
        string sqlFilePath = Path.Combine("..", "docs", "FULL_SETUP_DEMO_DATA.sql");

        if (!File.Exists(sqlFilePath))
        {
            Console.WriteLine($"‚ùå File not found: {sqlFilePath}");
            return;
        }

        Console.WriteLine("üîÑ Reading SQL file...");
        string sqlContent = File.ReadAllText(sqlFilePath);

        using var connection = new MySqlConnection(connectionString);
        
        try
        {
            Console.WriteLine("üîÑ Connecting to database...");
            connection.Open();
            Console.WriteLine("‚úÖ Connected to GarageManagementDB");

            // Start transaction
            using var transaction = connection.BeginTransaction();
            Console.WriteLine("üîÑ Transaction started...");

            try
            {
                // Split by semicolon and execute each statement
                var statements = sqlContent.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
                int executedCount = 0;
                int skippedCount = 0;

                foreach (var statement in statements)
                {
                    var trimmed = statement.Trim();
                    
                    // Skip empty or comment-only lines
                    if (string.IsNullOrWhiteSpace(trimmed) || 
                        trimmed.StartsWith("--") || 
                        trimmed.StartsWith("/*") ||
                        trimmed == "USE GarageManagementDB" ||
                        trimmed == "USE GaraManagement")
                    {
                        skippedCount++;
                        if (trimmed.Length > 10 && !trimmed.StartsWith("--"))
                        {
                            Console.WriteLine($"‚ö†Ô∏è  Skipped: {trimmed.Substring(0, Math.Min(50, trimmed.Length))}...");
                        }
                        continue;
                    }

                    try
                    {
                        using var command = new MySqlCommand(trimmed, connection, transaction);
                        command.CommandTimeout = 300; // 5 minutes
                        
                        var result = command.ExecuteNonQuery();
                        executedCount++;
                        
                        if (executedCount % 10 == 0)
                        {
                            Console.WriteLine($"   Executed: {executedCount} statements...");
                        }
                    }
                    catch (MySqlException ex) when (ex.Number == 1062) // Duplicate entry
                    {
                        Console.WriteLine($"‚ö†Ô∏è  Skipped (duplicate): {trimmed.Substring(0, Math.Min(50, trimmed.Length))}...");
                        skippedCount++;
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå Error executing statement:");
                        Console.WriteLine($"   Statement: {trimmed.Substring(0, Math.Min(100, trimmed.Length))}...");
                        Console.WriteLine($"   Error: {ex.Message}");
                        throw; // Re-throw to rollback transaction
                    }
                }

                // Commit transaction
                transaction.Commit();
                Console.WriteLine($"‚úÖ Transaction committed!");
                Console.WriteLine($"");
                Console.WriteLine($"üìä SUMMARY:");
                Console.WriteLine($"   ‚úÖ Executed: {executedCount} statements");
                Console.WriteLine($"   ‚ö†Ô∏è  Skipped: {skippedCount} statements");
                Console.WriteLine($"");
                Console.WriteLine($"üéâ Demo data loaded successfully!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå ERROR: {ex.Message}");
                Console.WriteLine($"üîÑ Rolling back transaction...");
                transaction.Rollback();
                Console.WriteLine($"‚úÖ Transaction rolled back. Database unchanged.");
                throw;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Fatal error: {ex.Message}");
            Environment.Exit(1);
        }
        finally
        {
            connection.Close();
            Console.WriteLine($"üîå Database connection closed.");
        }

        Console.WriteLine($"");
        Console.WriteLine($"‚úÖ COMPLETED! Press any key to exit...");
        Console.ReadKey();
    }
    
    static void ExecuteSqlFile(string filePath, string connectionString)
    {
        string sql = File.ReadAllText(filePath);
        using var conn = new MySqlConnection(connectionString);
        conn.Open();
        
        // Remove comments and USE statement
        var lines = sql.Split('\n');
        var cleanSql = "";
        foreach (var line in lines)
        {
            var trimmed = line.Trim();
            if (!trimmed.StartsWith("--") && trimmed != "USE GaraManagement;" && !string.IsNullOrWhiteSpace(trimmed))
            {
                cleanSql += line + "\n";
            }
        }
        
        // Split by semicolon to get individual statements
        var statements = cleanSql.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);
        int created = 0;
        int exists = 0;
        
        foreach (var stmt in statements)
        {
            var trimmed = stmt.Trim();
            if (string.IsNullOrWhiteSpace(trimmed))
                continue;
            
            try
            {
                using var cmd = new MySqlCommand(trimmed, conn);
                var result = cmd.ExecuteNonQuery();
                
                if (trimmed.StartsWith("CREATE TABLE"))
                {
                    created++;
                    var tableName = trimmed.Substring(trimmed.IndexOf("`") + 1);
                    tableName = tableName.Substring(0, tableName.IndexOf("`"));
                    Console.WriteLine($"  ‚úÖ Created: {tableName}");
                }
            }
            catch (Exception ex)
            {
                if (ex.Message.Contains("already exists"))
                {
                    exists++;
                }
                else if (!ex.Message.Contains("No operations"))
                {
                    Console.WriteLine($"  ‚ö†Ô∏è  Error: {ex.Message}");
                }
            }
        }
        conn.Close();
        Console.WriteLine($"‚úÖ Tables: {created} created, {exists} already exist\n");
    }
}

